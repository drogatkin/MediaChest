# MediaChest

project =mediachest
"build_directory" = ${~cwd~}/lib
source_directory ="${~cwd~}/src"
source_directory_util ="../mediautil/src"
doc_directory=${~cwd~}/doc
build_file ="${project}.jar"
 domain ="photoorganizer"
# resources ="${domain}.${project}.resources"
manifest ="manifest.mf"
main_class= "${domain}.PhotoOrganizer"
version=8
include(../rust_util/src/script/common-java.7b) 

CUSTOM CP=[${~cwd~}/../tiny-codec/tools/ID3V2/bin/id3v2.jar,
../shared/lib/IBMPlayerForMpeg4SDK.jar,
../JustFLAC/lib/jflac.jar,
../tiny-codec/codecs/APE/lib/ape-lib.jar,
../tiny-codec/codecs/Wavpack/bin/wavpack.jar,
../tiny-codec/codecs/ALAC/bin/alacdecoder.jar,
../tiny-codec/tools/ISO/bin/loopy.jar,
../shared/lib/jaad-0.8.4.jar,
# see https://github.com/frohoff/jdk8u-jdk
../shared/lib/comm.jar,
../tiny-codec/tools/CUE/bin/cuelib-1.2.1.jar,
../JustDSD/lib/jdsd.jar,
../aldan3/build/aldan3.jar,
../aldan3-jdo/build/aldan3-jdo.jar,
../AddressBook/lib/addressbook.jar,
${JAVA_HOME}/jre/lib/javaws.jar,
# maven loadable 
.temp_repo/jlayer-1.0.1.jar,
# 1.6.2
../shared/lib/javax.mail.jar,
3 .temp_repo/mail-1.4.7.jar,
.temp_repo/jorbis-0.0.17.jar,
# switch to 4.0 servlet
.temp_repo/javax.servlet-api-3.1.0.jar
]

target clean {
    dependency {true}
    exec rm  (
        -r,
        ${build_directory}/${domain},
        ${build_directory}/${build_file}
    )
}

target compile util:. {
   dependency {
       or {
             { newerthan(${source_directory_util}/.java,${build_directory}/.class)
               filter(~~,*-info.java) }
       }
   }
   {
        display(Compiling Java media util src ...)
       newerthan(${source_directory_util}/.java,${build_directory}/.class)
       assign(util src,~~)
       exec javac (
         -d,
         ${build_directory},
        -cp,
         ${build_directory},
         -source,
         version,
         -target,
         version,
         util src
       )     
      if {
         neq(${~~}, 0)
         then {
            panic("Compilation error(s)")
         }
     }
   }
}

target compile:. {
    dependency {
          target(compile util)
     }
   dependency {
       or {
              newerthan(${source_directory}/.java,${build_directory}/.class)
       }
   }
   {
        display(Compiling Java src ...)
       newerthan(${source_directory}/.java,${build_directory}/.class)
       assign(main src,~~)
       join(CUSTOM CP,~path_separator~)
        assign(extra deps,~~)
       exec javac (
         -d,
         ${build_directory},
        -cp,
         ${build_directory}${~path_separator~}${extra deps},
         -source,
         version,
         -target,
         version,
         main src
       )     
      if {
         neq(${~~}, 0)
         then {
            panic("Compilation error(s)")
         }
     }
   }
}

target jar {
      dependency {
         anynewer(${build_directory}/${domain}/*,${build_directory}/${build_file})
      }
      dependency {
          target(compile)
      }
     
     {    display(Jarring ${build_file} ...)
          files(resource/image/*.jpg,resource/image/*.png, resource/image/*.gif, resource/template/*.htmp, resource/template/*.xml, resource/text/*.res)
          assign(reses, ~~)
          exec jar (
            -cmf, ${~cwd~}/src/${manifest},
            ${build_directory}/${build_file},
            -C,
            ${build_directory},
            ${domain},
            -C,
            ${build_directory},
            mediautil,
            -C,
            .,
            reses
          )
        if {
         neq(${~~}, 0)
         then {
            panic("Error(s) at jarring")
         }
       }
     }
}

target run :.: {
    dependency {
        target(jar)
    }
    dependency {true}
    {
        scalar(CUSTOM CP,~path_separator~)
        assign(extra deps,~~)
           exec java::. (
                    -cp,
                     ${build_directory}/${build_file}${~path_separator~}${extra deps},           
                     -DMediaChest.home=./data/,
                     photoorganizer.PhotoOrganizer,
                    ~args~
                   )
    }
 }